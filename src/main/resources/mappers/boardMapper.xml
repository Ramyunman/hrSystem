<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">

	<!-- 게시판 글 작성 -->
	<insert id="insert">
		INSERT INTO employees ( employee_id
								, name
								, email
								, phone_number
								, hire_date
								, leave_date
								, department_id
								, address
								, reg_no
								, bank_id
								, bank_account)
    		VALUES (		    employees_seq.nextval
    							, #{name}
    							, #{email}
    							, #{phone_number}
    							, #{hire_date}
    							, #{leave_date}
    							, #{department_id}
    							, #{address}
    							, #{reg_no}
    							, #{bank_id}
    							, #{bank_account}
    				)
	</insert>
	
	<resultMap id="employeeResultMap" type="kr.co.vo.Employee">
		<id property="employee_id" column="employee_id"/>
		<result property="name" column="name" />
  		<result property="email" column="email" />
  		<result property="phone_number" column="phone_number" />
  		<result property="hire_date" column="hire_date" />
  		<result property="leave_date" column="leave_date" />
  		<result property="address" column="address" />
  		<result property="reg_no" column="reg_no" />
  		<result property="bank_id" column="bank_id" />
  		<result property="bank_account" column="bank_account" />
  		<association property="department" resultMap="departmentResultMap"/>
	</resultMap>
	
	<resultMap id="departmentResultMap" type="kr.co.vo.Department">
		<id property="department_id" column="department_id"/>
		<result property="department_name" column="department_name" />
	</resultMap>
		
	<!-- 게시판 목록 보기 -->
	<select id="listPage" resultType="kr.co.vo.Employee" parameterType="kr.co.vo.SearchCriteria" resultMap="employeeResultMap">
		SELECT 		EMPLOYEE_ID,
					NAME,
					EMAIL,
					PHONE_NUMBER,
					HIRE_DATE,
					LEAVE_DATE,
					DEPARTMENT_ID,
					ADDRESS,
					REG_NO,
					BANK_ID,
					BANK_ACCOUNT,
					DEPARTMENT_NAME
		  FROM (
    			SELECT e.*, d.department_name,
        		ROW_NUMBER() OVER(ORDER BY e.employee_id DESC) AS RNUM
    			FROM employees e
    			JOIN departments d
    			ON e.department_id = d.department_id
    			<include refid="search"></include>
				) emp
		WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY employee_id DESC
	</select>
	
	<!-- 목록 총 인원수 세기  -->
	<select id="listCount" parameterType="kr.co.vo.SearchCriteria" resultType="int">
		SELECT		COUNT(employee_id)
		FROM		employees 
		WHERE 		1=1
		<include refid="search"></include>
		AND 		employee_id > 0
	</select>
	
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 'working'.toString()">AND HIRE_DATE LIKE '%' || #{keyword} || '%' AND LEAVE_DATE IS NULL</if>
			<if test="searchType == 'left'.toString()">AND LEAVE_DATE LIKE '%' || #{keyword} || '%'</if>
		</if>
	</sql>
		
	<!-- 직원 정보 보기 -->
	<select id="read" parameterType="int" resultType="kr.co.vo.Employee">
		SELECT		EMPLOYEE_ID
			  		, NAME
					, REG_NO
					, DEPARTMENT_ID
					, HIRE_DATE
					, LEAVE_DATE
					, EMAIL
					, ADDRESS
					, PHONE_NUMBER
					, BANK_ACCOUNT
			FROM	employees
			
			WHERE EMPLOYEE_ID = #{EMPLOYEE_ID}
	</select>
	
	<!-- 직원 정보 수정 -->
	<update id="update" parameterType="kr.co.vo.Employee">
		UPDATE		employees
		SET			NAME	=	#{name},
					EMAIL	=	#{email},
					PHONE_NUMBER	=	#{phone_number},
					HIRE_DATE	=	#{hire_date},
					LEAVE_DATE	=	#{leave_date},
					DEPARTMENT_ID	=	#{department_id},
					ADDRESS		=	#{address},
					REG_NO		=	#{reg_no},
					BANK_ID		=	#{bank_id},
					BANK_ACCOUNT	=	#{bank_account}
		
		WHERE		EMPLOYEE_ID = #{employee_id} 
	</update>

	<!-- 직원 정보 삭제 -->
	<delete id="delete" parameterType="int">
		DELETE
		FROM 	employees
		
		WHERE	EMPLOYEE_ID	= #{employee_id}
	</delete>
	
	

	
</mapper>